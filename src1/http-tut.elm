-- import Html exposing (..)
-- import Html.App as Html
-- import Html.Attributes exposing (..)
-- import Html.Events exposing (onClick)
-- import Http
-- import Json.Decode as Json
-- import Task
--
-- type alias Model =
--   { topic : String
--   , gifUrl : String
--   }
--
-- init : (Model, Cmd Msg)
-- init =
--   (Model "cats" "waiting.gif", getRandomGif "cats")
--
-- type Msg
--   = MoarPlz
--   | FetchSucceeded String
--   | FetchFailed Http.Error
--
-- update : Msg -> Model -> (Model, Cmd Msg)
-- update msg model =
--   case msg of
--     MoarPlz ->
--       (model, getRandomGif model.topic)
--
--     FetchSucceeded newUrl ->
--       (Model model.topic newUrl, Cmd.none)
--
--     FetchFailed _ ->
--       (model, Cmd.none)
--
-- getRandomGif : String -> Cmd Msg
-- getRandomGif topic =
--   let
--     url =
--        "https://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC&tag=" ++ topic
--   in
--     Task.perform FetchFailed FetchSucceeded (Http.get decodeGifUrl url)
--
-- decodeGifUrl : Json.Decoder String
-- decodeGifUrl =
--   Json.at ["data", "image_url"] Json.string
--
-- view : Model -> Html Msg
-- view model =
--   div []
--     [ h2 [] [ text model.topic ]
--     , img [ src model.gifUrl ] []
--     , button [ onClick MoarPlz ] [ text "MORE PLZ" ]
--     ]
--
-- subscriptions : Model -> Sub Msg
-- subscriptions model =
--   Sub.none
--
-- main =
--   Html.program
--     { init = init
--     , view = view
--     , update = update
--     , subscriptions = subscriptions
--     }
